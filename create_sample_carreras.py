#!/usr/bin/env python3
"""
Script para crear carreras de ejemplo para el sistema de registro de alumnos
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pria.settings')
django.setup()

from core.models import Carrera

def create_sample_carreras():
    """Crear carreras de ejemplo."""
    carreras_data = [
        {
            'nombre': 'Ingenier√≠a en Sistemas Computacionales',
            'descripcion': 'Forma profesionales capaces de dise√±ar, desarrollar e implementar soluciones tecnol√≥gicas innovadoras.',
            'duracion_anios': 4,
            'activa': True
        },
        {
            'nombre': 'Ingenier√≠a Industrial',
            'descripcion': 'Forma ingenieros especializados en optimizaci√≥n de procesos y gesti√≥n de la producci√≥n.',
            'duracion_anios': 4,
            'activa': True
        },
        {
            'nombre': 'Administraci√≥n de Empresas',
            'descripcion': 'Forma administradores capaces de gestionar organizaciones de manera eficiente.',
            'duracion_anios': 4,
            'activa': True
        },
        {
            'nombre': 'Contadur√≠a P√∫blica',
            'descripcion': 'Forma contadores especializados en finanzas, auditor√≠a y gesti√≥n fiscal.',
            'duracion_anios': 4,
            'activa': True
        },
        {
            'nombre': 'Derecho',
            'descripcion': 'Forma abogados con s√≥lidos conocimientos en el sistema jur√≠dico mexicano.',
            'duracion_anios': 4,
            'activa': True
        },
        {
            'nombre': 'Psicolog√≠a',
            'descripcion': 'Forma psic√≥logos capaces de comprender y mejorar el comportamiento humano.',
            'duracion_anios': 4,
            'activa': True
        },
        {
            'nombre': 'Medicina',
            'descripcion': 'Forma m√©dicos generales con conocimientos cient√≠ficos y habilidades cl√≠nicas.',
            'duracion_anios': 6,
            'activa': True
        },
        {
            'nombre': 'Enfermer√≠a',
            'descripcion': 'Forma enfermeros especializados en el cuidado integral de la salud.',
            'duracion_anios': 4,
            'activa': True
        },
        {
            'nombre': 'Arquitectura',
            'descripcion': 'Forma arquitectos creativos con habilidades de dise√±o y construcci√≥n.',
            'duracion_anios': 5,
            'activa': True
        },
        {
            'nombre': 'Comunicaci√≥n y Periodismo',
            'descripcion': 'Forma comunicadores especializados en medios y relaciones p√∫blicas.',
            'duracion_anios': 4,
            'activa': True
        }
    ]
    
    carreras_creadas = []
    
    for carrera_data in carreras_data:
        carrera, created = Carrera.objects.get_or_create(
            nombre=carrera_data['nombre'],
            defaults=carrera_data
        )
        
        if created:
            carreras_creadas.append(carrera)
            print(f"‚úÖ Carrera creada: {carrera.nombre}")
        else:
            print(f"‚ÑπÔ∏è  Carrera ya existe: {carrera.nombre}")
    
    return carreras_creadas

def main():
    """Funci√≥n principal."""
    print("üéì Creando carreras de ejemplo...")
    print("=" * 50)
    
    try:
        carreras = create_sample_carreras()
        
        print("=" * 50)
        print(f"‚úÖ Proceso completado exitosamente!")
        print(f"üìä Total de carreras en el sistema: {Carrera.objects.count()}")
        print(f"üÜï Carreras creadas en esta ejecuci√≥n: {len(carreras)}")
        
        print("\nüìã Carreras disponibles:")
        for carrera in Carrera.objects.all():
            print(f"  ‚Ä¢ {carrera.nombre} ({carrera.duracion_anios} a√±os)")
            
    except Exception as e:
        print(f"‚ùå Error al crear carreras: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 